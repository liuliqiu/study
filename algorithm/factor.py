#!/usr/bin/env python
#-*- coding:utf-8 -*-
from itertools import count

def sqrt(n):
    a = 1
    f = lambda x:x * x - n
    while True:
        b = a - f(a) / (2 * a)
        if b == a:
            break
        else:
            a = b
    if a * a < n:
        while (a + 1) ** 2 <n:
            a += 1
        return a + 1
    elif a * a == n:
        return a
    else:
        while (a-1) ** 2 >= n:
            a -= 1
        return a

def factor1(N):
    A = sqrt(N)
    W = A ** 2 - N
    v = sqrt(W)
    assert (A - v) * (A + v) - N == 0
    return A - v

def factor2(N):
    A = sqrt(N)
    x = A
    while x - A < 2 ** 20:
        W = x ** 2 - N
        v = sqrt(W)
        if W - v * v == 0:
            assert (x - v) * (x + v) - N == 0
            return x - v
        x += 1

def is_sqr(x):
    r = sqrt(x)
    #print r ** 2 - x
    return r ** 2 == x

def factor3(N):
    A = sqrt(6 * N) * 2
    for x in range(1, 100):
        print x
        if is_sqr((A - x) ** 2 - 24 *N):
            if A + sqrt((A - x) ** 2 - 24 *N) % 4 == 0:
                break
        if is_sqr((A + x) ** 2 - 24 * N):
            if A + sqrt((A + x) ** 2 - 24 *N) % 4 == 0:
                break
def gcd(x, y):
    if x > y:
        (a, b), d = gcd(y, x)
        return (b, a), d
    elif x == 0:
        return (0, 1), y
    else:
        (a, b), d = gcd(y % x, x)
        return (b - a * (y/x), a), d



def inverse(x, p):
    (a, b), d = gcd(x, p)
    assert d == 1
    return a % p

def exp_mod(b, x, p):
    result = 1
    while x> 0:
        if x % 2 == 1:
            result = (result * b) % p
        x = x/2
        b = (b * b) % p
    return result % p

def rsa_decode(N, e, c):
    A = sqrt(N)
    W = A ** 2 - N
    v = sqrt(W)
    assert (A - v) * (A + v) - N == 0

    p, q = A - v, A + v
    phi = (p - 1) * (q - 1)
    d = inverse(e, phi)

    m = exp_mod(c, d, N)
    s = str(hex(m))[:-1].split("00")[-1]
    print s.decode('hex')



def main():
    N = 179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581
    #print factor1(N)
    e = 65537
    c = 22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540
    print rsa_decode(N, e, c)

    #N = 648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877
    #print factor2(N)
    #N = 720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929
    #print factor3(N)


if __name__ == "__main__":
    main()
