"""
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
Find the sum of all the even-valued terms in the sequence which do not exceed
four million.
"""

def sum_even_fibs_use_list_fibs(limit):
    fibs = [1, 2]
    while fibs[-2] + fibs[-1] < limit:
        fibs.append(fibs[-2] + fibs[-1])
    return sum(n for n in fibs if n % 2 == 0)


def sum_even_fibs_use_list(limit):
    even_fibs = [2, 8]
    while even_fibs[-2] + 4 * even_fibs[-1] < limit:
        even_fibs.append(even_fibs[-2] + 4 * even_fibs[-1])
    return sum(even_fibs)


def iter_even_fib(limit):
    even_fib1, even_fib2 = 2, 8
    if even_fib1 > limit:
        raise StopIteration
    yield even_fib1
    while even_fib2 <= limit:
        yield even_fib2
        even_fib1, even_fib2 = even_fib2, even_fib1 + 4 * even_fib2

def sum_even_fibs(limit):
    """
    >>> sum_even_fibs(10)
    10
    >>> sum_even_fibs(4000000)
    4613732
    """
    return sum(iter_even_fib(limit))

